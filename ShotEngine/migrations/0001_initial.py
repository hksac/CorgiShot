# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-11-04 08:19
from __future__ import unicode_literals

import ShotEngine.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=100)),
                ('submitTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Corporator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@_]+$', 'Enter a valid username. This value may contain only letters, numbers and @/. characters.')], verbose_name='username')),
                ('alias_name', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator('^[^%!@$#^&*()-=+<>?,/\\\\\\[\\]\\\'\\":;{}]+$', 'Enter a valid alias name. This value may contain only letters, numbers and @/. characters.')], verbose_name='alias name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=True, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('job_title', models.IntegerField(choices=[(0, 'Producer'), (1, 'Coordinator'), (2, 'Team Leader'), (3, 'Sub Team Leader'), (4, 'Supervisor'), (5, 'Artist'), (6, 'TD')], default=5)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'Corporator',
                'verbose_name_plural': 'Corporators',
            },
            managers=[
                ('objects', ShotEngine.models.CorporatorManager()),
            ],
        ),
        migrations.CreateModel(
            name='DepartmentRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.IntegerField(blank=True, choices=[(0, 'MATTEPAINTNG'), (1, 'ROTOPAINT'), (2, 'MODEL'), (3, 'MATCHMOVE'), (4, 'EFFECTS'), (5, 'LIGHTTING'), (6, 'COMPOSITING'), (7, 'PRODUCER'), (8, 'SUPERVISOR')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectBaseTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ProjName', models.CharField(blank=True, max_length=40)),
                ('ProjAliasName', models.CharField(blank=True, max_length=40)),
                ('ProjRootPath', models.FilePathField(path=b'\\\\192.168.0.243\\nas\\filmServe\\')),
                ('RawPlatesPath', models.FilePathField()),
                ('AssetsPath', models.FilePathField()),
                ('VFXPath', models.FilePathField()),
                ('DailyPath', models.FilePathField()),
                ('EditPath', models.FilePathField()),
                ('creatTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('modifyTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Scene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('description', models.CharField(max_length=100)),
                ('projectName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scenelist', to='ShotEngine.ProjectBaseTemplate')),
            ],
        ),
        migrations.CreateModel(
            name='ShotRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shotName', models.CharField(max_length=40)),
                ('Description', models.CharField(blank=True, max_length=100)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('PublishTime', models.DateTimeField(default='')),
                ('sceneName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shotlist', to='ShotEngine.Scene')),
            ],
        ),
        migrations.CreateModel(
            name='ShotSets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Shot Group', max_length=40)),
                ('shotgroup', models.ManyToManyField(blank=True, related_name='ShotGroups', to='ShotEngine.ShotRepository')),
            ],
        ),
        migrations.CreateModel(
            name='StatusRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statusName', models.CharField(max_length=40, unique=True)),
                ('statusAliase', models.CharField(default='', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='TaskRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currentversion', models.IntegerField(default=0)),
                ('assignTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teamPosition', models.IntegerField(choices=[(0, 'Producer'), (1, 'Coordinator'), (2, 'Team Leader'), (3, 'Sub Team Leader'), (4, 'Supervisor'), (5, 'Artist'), (6, 'TD')], default=5)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
        ),
        migrations.CreateModel(
            name='AbstractSubmitter',
            fields=[
                ('corporator_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ShotEngine.Corporator')),
            ],
            options={
                'abstract': False,
            },
            bases=('ShotEngine.corporator',),
        ),
        migrations.AddField(
            model_name='teammember',
            name='corporator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='taskrepository',
            name='artist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_as_artist', to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='taskrepository',
            name='currentstatus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ShotEngine.StatusRepository'),
        ),
        migrations.AddField(
            model_name='taskrepository',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ShotEngine.DepartmentRepository'),
        ),
        migrations.AddField(
            model_name='taskrepository',
            name='leader',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_as_leader', to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='taskrepository',
            name='shot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasklist', to='ShotEngine.ShotRepository'),
        ),
        migrations.AddField(
            model_name='statusrepository',
            name='submiter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='projectbasetemplate',
            name='Producer',
            field=models.ManyToManyField(related_name='Project_Producers', to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='projectbasetemplate',
            name='SuperVisor',
            field=models.ManyToManyField(related_name='Project_Supervisors', to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='projectbasetemplate',
            name='TeamLeader',
            field=models.ManyToManyField(related_name='Project_Teamleaders', to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='corporator',
            name='department',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='ShotEngine.DepartmentRepository'),
        ),
        migrations.AddField(
            model_name='corporator',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The corporatorgroups this corporator belongs to. A corporator will get all corporatorpermissions granted to each of their groups.', related_name='corporator_set', related_query_name='corporatoruser', to='auth.Group', verbose_name='corporatorgroups'),
        ),
        migrations.AddField(
            model_name='corporator',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this corporator.', related_name='corporator_set', related_query_name='corporatoruser', to='auth.Permission', verbose_name='corporator permissions'),
        ),
        migrations.AddField(
            model_name='commentrepository',
            name='submitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Comments', to='ShotEngine.Corporator'),
        ),
        migrations.AddField(
            model_name='commentrepository',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentlist', to='ShotEngine.TaskRepository'),
        ),
        migrations.AddField(
            model_name='abstractsubmitter',
            name='submitter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='as_submitters', to='ShotEngine.Corporator'),
        ),
    ]
